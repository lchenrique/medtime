/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * MedTime API
 * API do sistema MedTime para gestão de medicamentos e lembretes
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  PatchAuthProfileProfileBody,
  PostNotificationsTest200,
  PostNotificationsTestBody
} from '../../model'
import { customInstance } from '../../axios-client';



export const patchAuthProfileProfile = (
    patchAuthProfileProfileBody: PatchAuthProfileProfileBody,
 ) => {
      
      
      return customInstance<void>(
      {url: `/auth/profile/profile`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchAuthProfileProfileBody
    },
      );
    }
  


export const getPatchAuthProfileProfileMutationOptions = <TData = Awaited<ReturnType<typeof patchAuthProfileProfile>>, TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PatchAuthProfileProfileBody}, TContext>, }
) => {
const mutationKey = ['patchAuthProfileProfile'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAuthProfileProfile>>, {data: PatchAuthProfileProfileBody}> = (props) => {
          const {data} = props ?? {};

          return  patchAuthProfileProfile(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: PatchAuthProfileProfileBody}, TContext>}

    export type PatchAuthProfileProfileMutationResult = NonNullable<Awaited<ReturnType<typeof patchAuthProfileProfile>>>
    export type PatchAuthProfileProfileMutationBody = PatchAuthProfileProfileBody
    export type PatchAuthProfileProfileMutationError = unknown

    export const usePatchAuthProfileProfile = <TData = Awaited<ReturnType<typeof patchAuthProfileProfile>>, TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PatchAuthProfileProfileBody}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: PatchAuthProfileProfileBody},
        TContext
      > => {

      const mutationOptions = getPatchAuthProfileProfileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postNotificationsTest = (
    postNotificationsTestBody: PostNotificationsTestBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<PostNotificationsTest200>(
      {url: `/notifications/test`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postNotificationsTestBody, signal
    },
      );
    }
  


export const getPostNotificationsTestMutationOptions = <TData = Awaited<ReturnType<typeof postNotificationsTest>>, TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PostNotificationsTestBody}, TContext>, }
) => {
const mutationKey = ['postNotificationsTest'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postNotificationsTest>>, {data: PostNotificationsTestBody}> = (props) => {
          const {data} = props ?? {};

          return  postNotificationsTest(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: PostNotificationsTestBody}, TContext>}

    export type PostNotificationsTestMutationResult = NonNullable<Awaited<ReturnType<typeof postNotificationsTest>>>
    export type PostNotificationsTestMutationBody = PostNotificationsTestBody
    export type PostNotificationsTestMutationError = unknown

    export const usePostNotificationsTest = <TData = Awaited<ReturnType<typeof postNotificationsTest>>, TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PostNotificationsTestBody}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: PostNotificationsTestBody},
        TContext
      > => {

      const mutationOptions = getPostNotificationsTestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    