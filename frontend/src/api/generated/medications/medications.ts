/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * MedTime API
 * API do sistema MedTime para gestão de medicamentos e lembretes
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetMedications200Item,
  GetMedications500,
  GetMedicationsId200,
  GetMedicationsId404,
  GetMedicationsId500,
  PatchMedicationsMedicationIdStock200,
  PatchMedicationsMedicationIdStock404,
  PatchMedicationsMedicationIdStockBody,
  PostMedications201,
  PostMedications400,
  PostMedications500,
  PostMedicationsBody,
  PutMedicationsMarkAsTaken200,
  PutMedicationsMarkAsTaken404,
  PutMedicationsMarkAsTakenBody
} from '../../model'
import { customInstance } from '../../axios-client';



/**
 * Lista todas as medicações do usuário
 */
export const getMedications = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetMedications200Item[]>(
      {url: `/medications`, method: 'GET', signal
    },
      );
    }
  

export const getGetMedicationsQueryKey = () => {
    return [`/medications`] as const;
    }

    
export const getGetMedicationsQueryOptions = <TData = Awaited<ReturnType<typeof getMedications>>, TError = GetMedications500>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMedications>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMedicationsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMedications>>> = ({ signal }) => getMedications(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMedications>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMedicationsQueryResult = NonNullable<Awaited<ReturnType<typeof getMedications>>>
export type GetMedicationsQueryError = GetMedications500


export function useGetMedications<TData = Awaited<ReturnType<typeof getMedications>>, TError = GetMedications500>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMedications>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMedications>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMedications<TData = Awaited<ReturnType<typeof getMedications>>, TError = GetMedications500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMedications>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMedications>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMedications<TData = Awaited<ReturnType<typeof getMedications>>, TError = GetMedications500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMedications>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetMedications<TData = Awaited<ReturnType<typeof getMedications>>, TError = GetMedications500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMedications>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMedicationsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Cria uma nova medicação
 */
export const postMedications = (
    postMedicationsBody: PostMedicationsBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<PostMedications201>(
      {url: `/medications`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postMedicationsBody, signal
    },
      );
    }
  


export const getPostMedicationsMutationOptions = <TData = Awaited<ReturnType<typeof postMedications>>, TError = PostMedications400 | PostMedications500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PostMedicationsBody}, TContext>, }
) => {
const mutationKey = ['postMedications'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMedications>>, {data: PostMedicationsBody}> = (props) => {
          const {data} = props ?? {};

          return  postMedications(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: PostMedicationsBody}, TContext>}

    export type PostMedicationsMutationResult = NonNullable<Awaited<ReturnType<typeof postMedications>>>
    export type PostMedicationsMutationBody = PostMedicationsBody
    export type PostMedicationsMutationError = PostMedications400 | PostMedications500

    export const usePostMedications = <TData = Awaited<ReturnType<typeof postMedications>>, TError = PostMedications400 | PostMedications500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PostMedicationsBody}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: PostMedicationsBody},
        TContext
      > => {

      const mutationOptions = getPostMedicationsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Obtém uma medicação específica
 */
export const getMedicationsId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetMedicationsId200>(
      {url: `/medications/${id}`, method: 'GET', signal
    },
      );
    }
  

export const getGetMedicationsIdQueryKey = (id: string,) => {
    return [`/medications/${id}`] as const;
    }

    
export const getGetMedicationsIdQueryOptions = <TData = Awaited<ReturnType<typeof getMedicationsId>>, TError = GetMedicationsId404 | GetMedicationsId500>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMedicationsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMedicationsIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMedicationsId>>> = ({ signal }) => getMedicationsId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id),  staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMedicationsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetMedicationsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getMedicationsId>>>
export type GetMedicationsIdQueryError = GetMedicationsId404 | GetMedicationsId500


export function useGetMedicationsId<TData = Awaited<ReturnType<typeof getMedicationsId>>, TError = GetMedicationsId404 | GetMedicationsId500>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMedicationsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMedicationsId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMedicationsId<TData = Awaited<ReturnType<typeof getMedicationsId>>, TError = GetMedicationsId404 | GetMedicationsId500>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMedicationsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getMedicationsId>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetMedicationsId<TData = Awaited<ReturnType<typeof getMedicationsId>>, TError = GetMedicationsId404 | GetMedicationsId500>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMedicationsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetMedicationsId<TData = Awaited<ReturnType<typeof getMedicationsId>>, TError = GetMedicationsId404 | GetMedicationsId500>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getMedicationsId>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetMedicationsIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Marca ou desmarca um lembrete como tomado
 */
export const putMedicationsMarkAsTaken = (
    putMedicationsMarkAsTakenBody: PutMedicationsMarkAsTakenBody,
 ) => {
      
      
      return customInstance<PutMedicationsMarkAsTaken200>(
      {url: `/medications/mark-as-taken`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putMedicationsMarkAsTakenBody
    },
      );
    }
  


export const getPutMedicationsMarkAsTakenMutationOptions = <TData = Awaited<ReturnType<typeof putMedicationsMarkAsTaken>>, TError = PutMedicationsMarkAsTaken404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PutMedicationsMarkAsTakenBody}, TContext>, }
) => {
const mutationKey = ['putMedicationsMarkAsTaken'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putMedicationsMarkAsTaken>>, {data: PutMedicationsMarkAsTakenBody}> = (props) => {
          const {data} = props ?? {};

          return  putMedicationsMarkAsTaken(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: PutMedicationsMarkAsTakenBody}, TContext>}

    export type PutMedicationsMarkAsTakenMutationResult = NonNullable<Awaited<ReturnType<typeof putMedicationsMarkAsTaken>>>
    export type PutMedicationsMarkAsTakenMutationBody = PutMedicationsMarkAsTakenBody
    export type PutMedicationsMarkAsTakenMutationError = PutMedicationsMarkAsTaken404

    export const usePutMedicationsMarkAsTaken = <TData = Awaited<ReturnType<typeof putMedicationsMarkAsTaken>>, TError = PutMedicationsMarkAsTaken404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PutMedicationsMarkAsTakenBody}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: PutMedicationsMarkAsTakenBody},
        TContext
      > => {

      const mutationOptions = getPutMedicationsMarkAsTakenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Atualiza o estoque de um medicamento
 */
export const patchMedicationsMedicationIdStock = (
    medicationId: string,
    patchMedicationsMedicationIdStockBody: PatchMedicationsMedicationIdStockBody,
 ) => {
      
      
      return customInstance<PatchMedicationsMedicationIdStock200>(
      {url: `/medications/${medicationId}/stock`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchMedicationsMedicationIdStockBody
    },
      );
    }
  


export const getPatchMedicationsMedicationIdStockMutationOptions = <TData = Awaited<ReturnType<typeof patchMedicationsMedicationIdStock>>, TError = PatchMedicationsMedicationIdStock404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{medicationId: string;data: PatchMedicationsMedicationIdStockBody}, TContext>, }
) => {
const mutationKey = ['patchMedicationsMedicationIdStock'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchMedicationsMedicationIdStock>>, {medicationId: string;data: PatchMedicationsMedicationIdStockBody}> = (props) => {
          const {medicationId,data} = props ?? {};

          return  patchMedicationsMedicationIdStock(medicationId,data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{medicationId: string;data: PatchMedicationsMedicationIdStockBody}, TContext>}

    export type PatchMedicationsMedicationIdStockMutationResult = NonNullable<Awaited<ReturnType<typeof patchMedicationsMedicationIdStock>>>
    export type PatchMedicationsMedicationIdStockMutationBody = PatchMedicationsMedicationIdStockBody
    export type PatchMedicationsMedicationIdStockMutationError = PatchMedicationsMedicationIdStock404

    export const usePatchMedicationsMedicationIdStock = <TData = Awaited<ReturnType<typeof patchMedicationsMedicationIdStock>>, TError = PatchMedicationsMedicationIdStock404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{medicationId: string;data: PatchMedicationsMedicationIdStockBody}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {medicationId: string;data: PatchMedicationsMedicationIdStockBody},
        TContext
      > => {

      const mutationOptions = getPatchMedicationsMedicationIdStockMutationOptions(options);

      return useMutation(mutationOptions);
    }
    