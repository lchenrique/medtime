/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * MedTime API
 * API do sistema MedTime para gestão de medicamentos e lembretes
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetAuthProfile200,
  GetAuthProfile401,
  GetAuthProfile500,
  PatchAuthProfile200,
  PatchAuthProfile401,
  PatchAuthProfile500,
  PatchAuthProfileBody,
  PostAuthLogin200,
  PostAuthLogin401,
  PostAuthLoginBody,
  PostAuthRegister201,
  PostAuthRegister400,
  PostAuthRegisterBody,
  PutAuthFcmToken200,
  PutAuthFcmTokenBody,
  PutAuthProfile200,
  PutAuthProfile401,
  PutAuthProfile500,
  PutAuthProfileBody,
  PutAuthTauriEnabled200,
  PutAuthTauriEnabledBody
} from '../../model'
import { customInstance } from '../../axios-client';



/**
 * Autentica um usuário usando email e senha.
 * @summary Login
 */
export const postAuthLogin = (
    postAuthLoginBody: PostAuthLoginBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<PostAuthLogin200>(
      {url: `/auth/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAuthLoginBody, signal
    },
      );
    }
  


export const getPostAuthLoginMutationOptions = <TData = Awaited<ReturnType<typeof postAuthLogin>>, TError = PostAuthLogin401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PostAuthLoginBody}, TContext>, }
) => {
const mutationKey = ['postAuthLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthLogin>>, {data: PostAuthLoginBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: PostAuthLoginBody}, TContext>}

    export type PostAuthLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthLogin>>>
    export type PostAuthLoginMutationBody = PostAuthLoginBody
    export type PostAuthLoginMutationError = PostAuthLogin401

    /**
 * @summary Login
 */
export const usePostAuthLogin = <TData = Awaited<ReturnType<typeof postAuthLogin>>, TError = PostAuthLogin401,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PostAuthLoginBody}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: PostAuthLoginBody},
        TContext
      > => {

      const mutationOptions = getPostAuthLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Registra um novo usuário.
 * @summary Registro
 */
export const postAuthRegister = (
    postAuthRegisterBody: PostAuthRegisterBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<PostAuthRegister201>(
      {url: `/auth/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postAuthRegisterBody, signal
    },
      );
    }
  


export const getPostAuthRegisterMutationOptions = <TData = Awaited<ReturnType<typeof postAuthRegister>>, TError = PostAuthRegister400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PostAuthRegisterBody}, TContext>, }
) => {
const mutationKey = ['postAuthRegister'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRegister>>, {data: PostAuthRegisterBody}> = (props) => {
          const {data} = props ?? {};

          return  postAuthRegister(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: PostAuthRegisterBody}, TContext>}

    export type PostAuthRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthRegister>>>
    export type PostAuthRegisterMutationBody = PostAuthRegisterBody
    export type PostAuthRegisterMutationError = PostAuthRegister400

    /**
 * @summary Registro
 */
export const usePostAuthRegister = <TData = Awaited<ReturnType<typeof postAuthRegister>>, TError = PostAuthRegister400,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PostAuthRegisterBody}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: PostAuthRegisterBody},
        TContext
      > => {

      const mutationOptions = getPostAuthRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Obtém o perfil do usuário autenticado
 */
export const getAuthProfile = (
    
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetAuthProfile200>(
      {url: `/auth/profile`, method: 'GET', signal
    },
      );
    }
  

export const getGetAuthProfileQueryKey = () => {
    return [`/auth/profile`] as const;
    }

    
export const getGetAuthProfileQueryOptions = <TData = Awaited<ReturnType<typeof getAuthProfile>>, TError = GetAuthProfile401 | GetAuthProfile500>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthProfile>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetAuthProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getAuthProfile>>> = ({ signal }) => getAuthProfile(signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getAuthProfile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetAuthProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getAuthProfile>>>
export type GetAuthProfileQueryError = GetAuthProfile401 | GetAuthProfile500


export function useGetAuthProfile<TData = Awaited<ReturnType<typeof getAuthProfile>>, TError = GetAuthProfile401 | GetAuthProfile500>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthProfile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthProfile>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthProfile<TData = Awaited<ReturnType<typeof getAuthProfile>>, TError = GetAuthProfile401 | GetAuthProfile500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthProfile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getAuthProfile>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetAuthProfile<TData = Awaited<ReturnType<typeof getAuthProfile>>, TError = GetAuthProfile401 | GetAuthProfile500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthProfile>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetAuthProfile<TData = Awaited<ReturnType<typeof getAuthProfile>>, TError = GetAuthProfile401 | GetAuthProfile500>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getAuthProfile>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetAuthProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Atualiza o perfil do usuário autenticado
 */
export const putAuthProfile = (
    putAuthProfileBody: PutAuthProfileBody,
 ) => {
      
      
      return customInstance<PutAuthProfile200>(
      {url: `/auth/profile`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putAuthProfileBody
    },
      );
    }
  


export const getPutAuthProfileMutationOptions = <TData = Awaited<ReturnType<typeof putAuthProfile>>, TError = PutAuthProfile401 | PutAuthProfile500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PutAuthProfileBody}, TContext>, }
) => {
const mutationKey = ['putAuthProfile'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAuthProfile>>, {data: PutAuthProfileBody}> = (props) => {
          const {data} = props ?? {};

          return  putAuthProfile(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: PutAuthProfileBody}, TContext>}

    export type PutAuthProfileMutationResult = NonNullable<Awaited<ReturnType<typeof putAuthProfile>>>
    export type PutAuthProfileMutationBody = PutAuthProfileBody
    export type PutAuthProfileMutationError = PutAuthProfile401 | PutAuthProfile500

    export const usePutAuthProfile = <TData = Awaited<ReturnType<typeof putAuthProfile>>, TError = PutAuthProfile401 | PutAuthProfile500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PutAuthProfileBody}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: PutAuthProfileBody},
        TContext
      > => {

      const mutationOptions = getPutAuthProfileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Atualiza o perfil do usuário autenticado
 */
export const patchAuthProfile = (
    patchAuthProfileBody: PatchAuthProfileBody,
 ) => {
      
      
      return customInstance<PatchAuthProfile200>(
      {url: `/auth/profile`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: patchAuthProfileBody
    },
      );
    }
  


export const getPatchAuthProfileMutationOptions = <TData = Awaited<ReturnType<typeof patchAuthProfile>>, TError = PatchAuthProfile401 | PatchAuthProfile500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PatchAuthProfileBody}, TContext>, }
) => {
const mutationKey = ['patchAuthProfile'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchAuthProfile>>, {data: PatchAuthProfileBody}> = (props) => {
          const {data} = props ?? {};

          return  patchAuthProfile(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: PatchAuthProfileBody}, TContext>}

    export type PatchAuthProfileMutationResult = NonNullable<Awaited<ReturnType<typeof patchAuthProfile>>>
    export type PatchAuthProfileMutationBody = PatchAuthProfileBody
    export type PatchAuthProfileMutationError = PatchAuthProfile401 | PatchAuthProfile500

    export const usePatchAuthProfile = <TData = Awaited<ReturnType<typeof patchAuthProfile>>, TError = PatchAuthProfile401 | PatchAuthProfile500,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PatchAuthProfileBody}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: PatchAuthProfileBody},
        TContext
      > => {

      const mutationOptions = getPatchAuthProfileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Atualiza o token FCM do usuário
 */
export const putAuthFcmToken = (
    putAuthFcmTokenBody: PutAuthFcmTokenBody,
 ) => {
      
      
      return customInstance<PutAuthFcmToken200>(
      {url: `/auth/fcm-token`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putAuthFcmTokenBody
    },
      );
    }
  


export const getPutAuthFcmTokenMutationOptions = <TData = Awaited<ReturnType<typeof putAuthFcmToken>>, TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PutAuthFcmTokenBody}, TContext>, }
) => {
const mutationKey = ['putAuthFcmToken'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAuthFcmToken>>, {data: PutAuthFcmTokenBody}> = (props) => {
          const {data} = props ?? {};

          return  putAuthFcmToken(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: PutAuthFcmTokenBody}, TContext>}

    export type PutAuthFcmTokenMutationResult = NonNullable<Awaited<ReturnType<typeof putAuthFcmToken>>>
    export type PutAuthFcmTokenMutationBody = PutAuthFcmTokenBody
    export type PutAuthFcmTokenMutationError = unknown

    export const usePutAuthFcmToken = <TData = Awaited<ReturnType<typeof putAuthFcmToken>>, TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PutAuthFcmTokenBody}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: PutAuthFcmTokenBody},
        TContext
      > => {

      const mutationOptions = getPutAuthFcmTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * Atualiza status do cliente Tauri
 */
export const putAuthTauriEnabled = (
    putAuthTauriEnabledBody: PutAuthTauriEnabledBody,
 ) => {
      
      
      return customInstance<PutAuthTauriEnabled200>(
      {url: `/auth/tauri-enabled`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: putAuthTauriEnabledBody
    },
      );
    }
  


export const getPutAuthTauriEnabledMutationOptions = <TData = Awaited<ReturnType<typeof putAuthTauriEnabled>>, TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PutAuthTauriEnabledBody}, TContext>, }
) => {
const mutationKey = ['putAuthTauriEnabled'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putAuthTauriEnabled>>, {data: PutAuthTauriEnabledBody}> = (props) => {
          const {data} = props ?? {};

          return  putAuthTauriEnabled(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: PutAuthTauriEnabledBody}, TContext>}

    export type PutAuthTauriEnabledMutationResult = NonNullable<Awaited<ReturnType<typeof putAuthTauriEnabled>>>
    export type PutAuthTauriEnabledMutationBody = PutAuthTauriEnabledBody
    export type PutAuthTauriEnabledMutationError = unknown

    export const usePutAuthTauriEnabled = <TData = Awaited<ReturnType<typeof putAuthTauriEnabled>>, TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PutAuthTauriEnabledBody}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: PutAuthTauriEnabledBody},
        TContext
      > => {

      const mutationOptions = getPutAuthTauriEnabledMutationOptions(options);

      return useMutation(mutationOptions);
    }
    