/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * MedTime API
 * API do sistema MedTime para gestão de medicamentos e lembretes
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  PostRemindersMedicationIdReminders201,
  PostRemindersMedicationIdReminders404,
  PostRemindersMedicationIdRemindersBody
} from '../../model'
import { customInstance } from '../../axios-client';



/**
 * Cria um novo lembrete para uma medicação
 */
export const postRemindersMedicationIdReminders = (
    medicationId: string,
    postRemindersMedicationIdRemindersBody: PostRemindersMedicationIdRemindersBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<PostRemindersMedicationIdReminders201>(
      {url: `/reminders/${medicationId}/reminders`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postRemindersMedicationIdRemindersBody, signal
    },
      );
    }
  


export const getPostRemindersMedicationIdRemindersMutationOptions = <TData = Awaited<ReturnType<typeof postRemindersMedicationIdReminders>>, TError = PostRemindersMedicationIdReminders404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{medicationId: string;data: PostRemindersMedicationIdRemindersBody}, TContext>, }
) => {
const mutationKey = ['postRemindersMedicationIdReminders'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postRemindersMedicationIdReminders>>, {medicationId: string;data: PostRemindersMedicationIdRemindersBody}> = (props) => {
          const {medicationId,data} = props ?? {};

          return  postRemindersMedicationIdReminders(medicationId,data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{medicationId: string;data: PostRemindersMedicationIdRemindersBody}, TContext>}

    export type PostRemindersMedicationIdRemindersMutationResult = NonNullable<Awaited<ReturnType<typeof postRemindersMedicationIdReminders>>>
    export type PostRemindersMedicationIdRemindersMutationBody = PostRemindersMedicationIdRemindersBody
    export type PostRemindersMedicationIdRemindersMutationError = PostRemindersMedicationIdReminders404

    export const usePostRemindersMedicationIdReminders = <TData = Awaited<ReturnType<typeof postRemindersMedicationIdReminders>>, TError = PostRemindersMedicationIdReminders404,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{medicationId: string;data: PostRemindersMedicationIdRemindersBody}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {medicationId: string;data: PostRemindersMedicationIdRemindersBody},
        TContext
      > => {

      const mutationOptions = getPostRemindersMedicationIdRemindersMutationOptions(options);

      return useMutation(mutationOptions);
    }
    