/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * MedTime API
 * API do sistema MedTime para gestão de medicamentos e lembretes
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetNotificationsWsWsParams,
  GetWsParams
} from '../../model'
import { customInstance } from '../../axios-client';



/**
 * Conexão WebSocket para notificações em tempo real (apenas Tauri)
 */
export const getNotificationsWsWs = (
    params: GetNotificationsWsWsParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/notifications/ws/ws`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetNotificationsWsWsQueryKey = (params: GetNotificationsWsWsParams,) => {
    return [`/notifications/ws/ws`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNotificationsWsWsQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationsWsWs>>, TError = unknown>(params: GetNotificationsWsWsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsWsWs>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNotificationsWsWsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationsWsWs>>> = ({ signal }) => getNotificationsWsWs(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationsWsWs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetNotificationsWsWsQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationsWsWs>>>
export type GetNotificationsWsWsQueryError = unknown


export function useGetNotificationsWsWs<TData = Awaited<ReturnType<typeof getNotificationsWsWs>>, TError = unknown>(
 params: GetNotificationsWsWsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsWsWs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationsWsWs>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotificationsWsWs<TData = Awaited<ReturnType<typeof getNotificationsWsWs>>, TError = unknown>(
 params: GetNotificationsWsWsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsWsWs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationsWsWs>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotificationsWsWs<TData = Awaited<ReturnType<typeof getNotificationsWsWs>>, TError = unknown>(
 params: GetNotificationsWsWsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsWsWs>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetNotificationsWsWs<TData = Awaited<ReturnType<typeof getNotificationsWsWs>>, TError = unknown>(
 params: GetNotificationsWsWsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsWsWs>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationsWsWsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Conexão WebSocket para notificações em tempo real (apenas Tauri)
 */
export const getWs = (
    params: GetWsParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<void>(
      {url: `/ws`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetWsQueryKey = (params: GetWsParams,) => {
    return [`/ws`, ...(params ? [params]: [])] as const;
    }

    
export const getGetWsQueryOptions = <TData = Awaited<ReturnType<typeof getWs>>, TError = unknown>(params: GetWsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWs>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetWsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getWs>>> = ({ signal }) => getWs(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getWs>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetWsQueryResult = NonNullable<Awaited<ReturnType<typeof getWs>>>
export type GetWsQueryError = unknown


export function useGetWs<TData = Awaited<ReturnType<typeof getWs>>, TError = unknown>(
 params: GetWsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWs>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWs>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWs<TData = Awaited<ReturnType<typeof getWs>>, TError = unknown>(
 params: GetWsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWs>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getWs>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetWs<TData = Awaited<ReturnType<typeof getWs>>, TError = unknown>(
 params: GetWsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWs>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetWs<TData = Awaited<ReturnType<typeof getWs>>, TError = unknown>(
 params: GetWsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getWs>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetWsQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



