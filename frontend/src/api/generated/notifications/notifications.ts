/**
 * Generated by orval v7.4.1 🍺
 * Do not edit manually.
 * MedTime API
 * API do sistema MedTime para gestão de medicamentos e lembretes
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetNotificationsSync200Item,
  GetNotificationsSyncParams,
  PostNotificationsTest200,
  PostNotificationsTestBody
} from '../../model'
import { customInstance } from '../../axios-client';



/**
 * Sincroniza notificações locais para cliente Tauri
 */
export const getNotificationsSync = (
    params?: GetNotificationsSyncParams,
 signal?: AbortSignal
) => {
      
      
      return customInstance<GetNotificationsSync200Item[]>(
      {url: `/notifications/sync`, method: 'GET',
        params, signal
    },
      );
    }
  

export const getGetNotificationsSyncQueryKey = (params?: GetNotificationsSyncParams,) => {
    return [`/notifications/sync`, ...(params ? [params]: [])] as const;
    }

    
export const getGetNotificationsSyncQueryOptions = <TData = Awaited<ReturnType<typeof getNotificationsSync>>, TError = unknown>(params?: GetNotificationsSyncParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsSync>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetNotificationsSyncQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getNotificationsSync>>> = ({ signal }) => getNotificationsSync(params, signal);

      

      

   return  { queryKey, queryFn,   staleTime: 10000,  ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getNotificationsSync>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetNotificationsSyncQueryResult = NonNullable<Awaited<ReturnType<typeof getNotificationsSync>>>
export type GetNotificationsSyncQueryError = unknown


export function useGetNotificationsSync<TData = Awaited<ReturnType<typeof getNotificationsSync>>, TError = unknown>(
 params: undefined |  GetNotificationsSyncParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsSync>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationsSync>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotificationsSync<TData = Awaited<ReturnType<typeof getNotificationsSync>>, TError = unknown>(
 params?: GetNotificationsSyncParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsSync>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getNotificationsSync>>,
          TError,
          TData
        > , 'initialData'
      >, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetNotificationsSync<TData = Awaited<ReturnType<typeof getNotificationsSync>>, TError = unknown>(
 params?: GetNotificationsSyncParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsSync>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetNotificationsSync<TData = Awaited<ReturnType<typeof getNotificationsSync>>, TError = unknown>(
 params?: GetNotificationsSyncParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getNotificationsSync>>, TError, TData>>, }

  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetNotificationsSyncQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * Cria uma notificação de teste
 */
export const postNotificationsTest = (
    postNotificationsTestBody: PostNotificationsTestBody,
 signal?: AbortSignal
) => {
      
      
      return customInstance<PostNotificationsTest200>(
      {url: `/notifications/test`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: postNotificationsTestBody, signal
    },
      );
    }
  


export const getPostNotificationsTestMutationOptions = <TData = Awaited<ReturnType<typeof postNotificationsTest>>, TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PostNotificationsTestBody}, TContext>, }
) => {
const mutationKey = ['postNotificationsTest'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postNotificationsTest>>, {data: PostNotificationsTestBody}> = (props) => {
          const {data} = props ?? {};

          return  postNotificationsTest(data,)
        }

        


  return  { mutationFn, ...mutationOptions } as UseMutationOptions<TData, TError,{data: PostNotificationsTestBody}, TContext>}

    export type PostNotificationsTestMutationResult = NonNullable<Awaited<ReturnType<typeof postNotificationsTest>>>
    export type PostNotificationsTestMutationBody = PostNotificationsTestBody
    export type PostNotificationsTestMutationError = unknown

    export const usePostNotificationsTest = <TData = Awaited<ReturnType<typeof postNotificationsTest>>, TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<TData, TError,{data: PostNotificationsTestBody}, TContext>, }
): UseMutationResult<
        TData,
        TError,
        {data: PostNotificationsTestBody},
        TContext
      > => {

      const mutationOptions = getPostNotificationsTestMutationOptions(options);

      return useMutation(mutationOptions);
    }
    